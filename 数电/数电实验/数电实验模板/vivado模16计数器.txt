`timescale 1ns / 1ps
 module ctr_mod_16(
     clk,
     rst_n,
     count
     );
     input clk, rst_n;
     output [3:0] count;
     wire clk, rst_n;
     reg [3:0] count;
     
     always @ (posedge rst_n  or negedge clk)
     begin
         if(rst_n == 0)
             count = 4'b0000;//这里也要符合4比特的格式
         else
             count <= (count + 1) % 16;
     end
 endmodule

 `timescale 1ns / 1ps
 module ctr_mod_16_tb;
 reg clk, rst_n;
 wire [3:0] count;
 initial
 $monitor ("count = %b", count);
 initial
     begin
         #0  rst_n = 1'b0;
         #20  rst_n = 1'b1;
     end
 initial
     begin
             #0  clk = 1'b0;
         forever
             #10 clk = ~clk;
     end
 initial
     begin
         #320 $stop;
     end    
     
 ctr_mod_16 inst(
     .clk(clk),
     .rst_n(rst_n),
     .count(count)
 );        
 endmodule